<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>StatsBiboroku - Optimization</title><link href="https://ktrmnm.github.io/biboroku/" rel="alternate"></link><link href="https://ktrmnm.github.io/biboroku/feeds/optimization.atom.xml" rel="self"></link><id>https://ktrmnm.github.io/biboroku/</id><updated>2017-04-02T00:00:00+09:00</updated><entry><title>Subquadratic submodular function minimization</title><link href="https://ktrmnm.github.io/biboroku/subquadratic-submodular-function-minimization.html" rel="alternate"></link><published>2017-04-02T00:00:00+09:00</published><updated>2017-04-02T00:00:00+09:00</updated><author><name>Kentaro Minami</name></author><id>tag:ktrmnm.github.io,2017-04-02:/biboroku/subquadratic-submodular-function-minimization.html</id><summary type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;劣モジュラ関数最小化問題について：
(1) $O(n M^3 \log n EO)$ の偽多項式時間アルゴリズムを提案．ただし，目的関数は整数値で，最大値はMとする．
(2) $O(n^{5/3} EO/\epsilon) $ の $\epsilon$-近似アルゴリズムを提案．&lt;/p&gt;
&lt;p&gt;アルゴリズムを一言でいえば，最小化したい関数のLovasz拡張を（確率的）劣勾配降下法で最小化する．
しかし，Lovasz拡張の劣勾配の更新が高速であるため，1ステップが速く回せる．
(1) の場合は，Lovasz拡張の劣勾配の成分の非ゼロ要素が O(M) であることに着目し，スパースベクトルの加算時に勾配を速く更新できるアルゴリズムを考える．
(2) の場合は，スパースな確率的劣勾配で分散が十分小さいものを高速に構成する．&lt;/p&gt;
&lt;h2&gt;文献情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Author: D. Chakrabarty, Y. Lee, A Sidford, and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;劣モジュラ関数最小化問題について：
(1) $O(n M^3 \log n EO)$ の偽多項式時間アルゴリズムを提案．ただし，目的関数は整数値で，最大値はMとする．
(2) $O(n^{5/3} EO/\epsilon) $ の $\epsilon$-近似アルゴリズムを提案．&lt;/p&gt;
&lt;p&gt;アルゴリズムを一言でいえば，最小化したい関数のLovasz拡張を（確率的）劣勾配降下法で最小化する．
しかし，Lovasz拡張の劣勾配の更新が高速であるため，1ステップが速く回せる．
(1) の場合は，Lovasz拡張の劣勾配の成分の非ゼロ要素が O(M) であることに着目し，スパースベクトルの加算時に勾配を速く更新できるアルゴリズムを考える．
(2) の場合は，スパースな確率的劣勾配で分散が十分小さいものを高速に構成する．&lt;/p&gt;
&lt;h2&gt;文献情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Author: D. Chakrabarty, Y. Lee, A Sidford, and S. Wong&lt;/li&gt;
&lt;li&gt;Conference: STOC&lt;/li&gt;
&lt;li&gt;Year: 2017&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1610.09800"&gt;arxiv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コメント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;離散最適化を確率的凸最適化で殴った論文．近似アルゴリズムの方は構成が真に確率的なところが面白い．&lt;/li&gt;
&lt;/ul&gt;</content><category term="[STOC]"></category><category term="離散最適化"></category><category term="劣モジュラ最小化"></category></entry><entry><title>A combinatorial algorithm for minimizing symmetric submodular functions</title><link href="https://ktrmnm.github.io/biboroku/a-combinatorial-algorithm-for-minimizing-symmetric-submodular-functions.html" rel="alternate"></link><published>2017-03-25T00:00:00+09:00</published><updated>2017-03-25T00:00:00+09:00</updated><author><name>Kentaro Minami</name></author><id>tag:ktrmnm.github.io,2017-03-25:/biboroku/a-combinatorial-algorithm-for-minimizing-symmetric-submodular-functions.html</id><summary type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;対称劣モジュラ関数最小化の $O(|V|^3)$ アルゴリズムを与えた論文．ただし，対称劣モジュラ関数というのは，劣モジュラ関数 $f: 2^V \to \mathbb{R}$ であって，$f(X) = f(V - X)$ が成り立つものである．&lt;/p&gt;
&lt;h2&gt;文献情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Author: M. Queyranne&lt;/li&gt;
&lt;li&gt;Conference: SODA&lt;/li&gt;
&lt;li&gt;Year: 1995&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=313669"&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コメント&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;対称劣モジュラ関数のわかりやすい例は，無向グラフのカット関数である．また，fが劣モジュラ関数のとき，$g(X) = f(X) + f(V - X)$ によって対称劣モジュラ関数 $g$ を作れる．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;「対称劣モジュラ関数最小化」とは，正確には，$|V …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;対称劣モジュラ関数最小化の $O(|V|^3)$ アルゴリズムを与えた論文．ただし，対称劣モジュラ関数というのは，劣モジュラ関数 $f: 2^V \to \mathbb{R}$ であって，$f(X) = f(V - X)$ が成り立つものである．&lt;/p&gt;
&lt;h2&gt;文献情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Author: M. Queyranne&lt;/li&gt;
&lt;li&gt;Conference: SODA&lt;/li&gt;
&lt;li&gt;Year: 1995&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=313669"&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コメント&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;対称劣モジュラ関数のわかりやすい例は，無向グラフのカット関数である．また，fが劣モジュラ関数のとき，$g(X) = f(X) + f(V - X)$ によって対称劣モジュラ関数 $g$ を作れる．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;「対称劣モジュラ関数最小化」とは，正確には，$|V| \geq 2$ として，空集合と全体集合を除いた $V$ の真部分集合の中で $f$ を最小化するものを求める問題である．例えば，非負重みをもつ無向グラフのカット関数の最小値は明らかに $f(\emptyset) = f(V) = 0$ であるが，そうではなくて非自明な部分の最小値を求める．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アルゴリズムの概要は次の通りである： まず，任意の対称劣モジュラ関数に対して，pendent pairと呼ばれる頂点のペア $(s,t)$ が存在することが知られている．ここでpendent pairというのは，$s$ を固定したとき，s-tカットの最小値が1点集合 ${ t }$ によって達成されるもののことである．このようなペアは $O(n^2)$ 回の関数呼び出しで発見することができる．Queyranneのアルゴリズムは，pendent pair発見アルゴリズムを再帰的に $n-1$ 回呼び出すことで得られる．定義から，pendent pair $(s, t)$ があるとき，最小化問題の解 $X$ は $f(X) = f(t)$ であるか，$s, t \in X$ であるかのどちらかである．前者であれば終了だが，それは判定できないので，ひとまず $t$ と $f(t)$ の値を記憶しておく．後者であると仮定すると，$(s, t)$ をまとめて1頂点だと思うことで，サイズが $n-1$ の問題に帰着される．よって，「pendent pairを見つけて結合する」という操作を残り2頂点になるまで繰り返せば，記憶した $t$ のうちどれかがminimizerになっている．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;もともと，Nagamochi and Ibaraki (1992)の最小s-tカットアルゴリズムというものがあり，その拡張として提案されたらしい．&lt;a href="https://www.elsevier.com/books/submodular-functions-and-optimization/fujishige/978-0-444-52086-9"&gt;Fujishige (2005)&lt;/a&gt; のsection 13にも歴史が載っている．&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="[SODA]"></category><category term="離散最適化"></category><category term="劣モジュラ最小化"></category></entry><entry><title>Provable submodular minimization using Wolfe's algorithm</title><link href="https://ktrmnm.github.io/biboroku/provable-submodular-minimization-using-wolfes-algorithm.html" rel="alternate"></link><published>2017-03-25T00:00:00+09:00</published><updated>2017-03-25T00:00:00+09:00</updated><author><name>Kentaro Minami</name></author><id>tag:ktrmnm.github.io,2017-03-25:/biboroku/provable-submodular-minimization-using-wolfes-algorithm.html</id><summary type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;劣モジュラ関数最小化問題で，実用上最速と噂されていたFujishige--Wolfeのアルゴリズム（最小ノルム点アルゴリズム）に擬多項式時間の保証を与えた論文．Fujishige--Wolfeは，基多面体 (base polyhedron) の上で2-ノルムの2乗が最小になる点を探すアルゴリズムである．&lt;/p&gt;
&lt;h2&gt;文献情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Author: D. Chakrabarty, P. Jain and P. Kothari&lt;/li&gt;
&lt;li&gt;Conference: NIPS&lt;/li&gt;
&lt;li&gt;Year: 2014&lt;/li&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/5321-provable-submodular-minimization-using-wolfes-algorithm"&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コメント&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Chakrabarty, et al. (2014) はまず，任意の多面体に対して，Wolfeの最小ノルム点アルゴリズムの連続最適化としての収束保証を与えた．次に，最小ノルム点の連続最適化としての近似精度が $\epsilon$ ならば，そこから構成できる解の（離散最適化としての）近似精度は $2n\epsilon$ である．よって，目的関数 $f$ の値のジャンプの最小幅 $F$ よりも $2n\epsilon …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;劣モジュラ関数最小化問題で，実用上最速と噂されていたFujishige--Wolfeのアルゴリズム（最小ノルム点アルゴリズム）に擬多項式時間の保証を与えた論文．Fujishige--Wolfeは，基多面体 (base polyhedron) の上で2-ノルムの2乗が最小になる点を探すアルゴリズムである．&lt;/p&gt;
&lt;h2&gt;文献情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Author: D. Chakrabarty, P. Jain and P. Kothari&lt;/li&gt;
&lt;li&gt;Conference: NIPS&lt;/li&gt;
&lt;li&gt;Year: 2014&lt;/li&gt;
&lt;li&gt;&lt;a href="https://papers.nips.cc/paper/5321-provable-submodular-minimization-using-wolfes-algorithm"&gt;URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;コメント&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Chakrabarty, et al. (2014) はまず，任意の多面体に対して，Wolfeの最小ノルム点アルゴリズムの連続最適化としての収束保証を与えた．次に，最小ノルム点の連続最適化としての近似精度が $\epsilon$ ならば，そこから構成できる解の（離散最適化としての）近似精度は $2n\epsilon$ である．よって，目的関数 $f$ の値のジャンプの最小幅 $F$ よりも $2n\epsilon$ を小さくとれば最適解となる．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全体での計算量は $O((n^5 \gamma + n^7)F)$ になる．ただし，$\gamma$ は関数値オラクル呼び出しのコストである．ジャンプの幅 $F$ に依存しているため「擬」多項式時間である．ただし，$f$ が整数値であることが予めわかっていれば，ジャンプ幅は1で下から抑えればよい．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この分野の論文としては珍しく（？）計算機実験がある．強多項式時間アルゴリズムとしては2014年当時の理論最速だったIwata and Orlin (2009) のアルゴリズムと比較し，Fujishige--Wolfeの方が実計算時間が速い傾向にあることを示した．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2017年現在，理論的に速いアルゴリズムは [Lee+2015] や [Chakrabarty+2017] とのことらしい．後者の筆頭著者はこの論文と同じ人．&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;参考文献&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[Lee+2015] Lee, Sidford and Wong. Faster cutting plane method and its implications for combinatorial and convex optimization. In FOCS, 2015.&lt;/li&gt;
&lt;li&gt;[Chakrabarty+2017] Chakrabarty, Lee, Sidford and Wong. Subquadratic submodular function minimization. In STOC, 2017.&lt;/li&gt;
&lt;/ul&gt;</content><category term="[NIPS]"></category><category term="離散最適化"></category><category term="劣モジュラ最小化"></category></entry></feed>